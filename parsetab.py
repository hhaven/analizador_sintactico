
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN COMMA DIVIDE DO ELSE EQ FOR GE GT ID IF INCLUDE LBRACE LE LPAREN LT MINUS NE NOT NUMBER OR PLUS RBRACE RETURN RPAREN SEMICOLON STRING TIMES TYPE VOID WHILEprogram : program statement\n               | statement\n    statement : variable_declaration\n                 | conditional_statement\n                 | function_call SEMICOLON\n                 | return_statement\n                 | function_declaration\n    return_statement : RETURN expression SEMICOLON\n                       | RETURN SEMICOLON\n    variable_declaration : TYPE ID SEMICOLONconditional_statement : IF LPAREN expression RPAREN compound_statement\n                             | IF LPAREN expression RPAREN compound_statement ELSE compound_statementcompound_statement : LBRACE statement_list RBRACE\n                          | LBRACE RBRACEexpression : STRING\n                  | ID\n                  | NUMBER\n                  | LPAREN expression RPAREN\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression EQ expression\n                  | expression NE expression\n    function_call : ID LPAREN argument_list RPAREN\n                     | ID LPAREN RPAREN\n    function_declaration : TYPE ID LPAREN argument_list RPAREN LBRACE statement_list RBRACE\n                            | TYPE ID LPAREN RPAREN LBRACE statement_list RBRACE\n    argument_list : argument_list COMMA expression\n                     | expression\n    statement_list : statement_list statement\n                      | statement\n    '
    
_lr_action_items = {'TYPE':([0,1,2,3,4,6,7,12,13,18,23,29,58,60,61,62,63,64,66,67,68,69,70,71,72,73,],[8,8,-2,-3,-4,-6,-7,-1,-5,-9,-10,-8,8,-11,8,8,8,-36,8,-14,8,-32,-35,-12,-13,-31,]),'IF':([0,1,2,3,4,6,7,12,13,18,23,29,58,60,61,62,63,64,66,67,68,69,70,71,72,73,],[10,10,-2,-3,-4,-6,-7,-1,-5,-9,-10,-8,10,-11,10,10,10,-36,10,-14,10,-32,-35,-12,-13,-31,]),'ID':([0,1,2,3,4,6,7,8,11,12,13,15,16,18,22,23,24,29,30,31,32,33,34,35,36,37,38,39,44,58,60,61,62,63,64,66,67,68,69,70,71,72,73,],[9,9,-2,-3,-4,-6,-7,14,20,-1,-5,20,20,-9,20,-10,20,-8,20,20,20,20,20,20,20,20,20,20,20,9,-11,9,9,9,-36,9,-14,9,-32,-35,-12,-13,-31,]),'RETURN':([0,1,2,3,4,6,7,12,13,18,23,29,58,60,61,62,63,64,66,67,68,69,70,71,72,73,],[11,11,-2,-3,-4,-6,-7,-1,-5,-9,-10,-8,11,-11,11,11,11,-36,11,-14,11,-32,-35,-12,-13,-31,]),'$end':([1,2,3,4,6,7,12,13,18,23,29,60,67,69,71,72,73,],[0,-2,-3,-4,-6,-7,-1,-5,-9,-10,-8,-11,-14,-32,-12,-13,-31,]),'RBRACE':([3,4,6,7,13,18,23,29,60,61,63,64,66,67,68,69,70,71,72,73,],[-3,-4,-6,-7,-5,-9,-10,-8,-11,67,69,-36,72,-14,73,-32,-35,-12,-13,-31,]),'SEMICOLON':([5,11,14,17,19,20,21,26,43,46,47,48,49,50,51,52,53,54,55,56,],[13,18,23,29,-15,-16,-17,-30,-29,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-18,]),'LPAREN':([9,10,11,14,15,16,22,24,30,31,32,33,34,35,36,37,38,39,44,],[15,16,22,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'STRING':([11,15,16,22,24,30,31,32,33,34,35,36,37,38,39,44,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NUMBER':([11,15,16,22,24,30,31,32,33,34,35,36,37,38,39,44,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'RPAREN':([15,19,20,21,24,25,27,28,40,41,46,47,48,49,50,51,52,53,54,55,56,59,],[26,-15,-16,-17,42,43,-34,45,56,57,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-18,-33,]),'PLUS':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[30,-15,-16,-17,30,30,30,30,30,30,30,30,30,30,30,30,30,-18,30,]),'MINUS':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[31,-15,-16,-17,31,31,31,31,31,31,31,31,31,31,31,31,31,-18,31,]),'TIMES':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[32,-15,-16,-17,32,32,32,32,32,32,32,32,32,32,32,32,32,-18,32,]),'DIVIDE':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[33,-15,-16,-17,33,33,33,33,33,33,33,33,33,33,33,33,33,-18,33,]),'LT':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[34,-15,-16,-17,34,34,34,34,34,34,34,34,34,34,34,34,34,-18,34,]),'LE':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[35,-15,-16,-17,35,35,35,35,35,35,35,35,35,35,35,35,35,-18,35,]),'GT':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[36,-15,-16,-17,36,36,36,36,36,36,36,36,36,36,36,36,36,-18,36,]),'GE':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[37,-15,-16,-17,37,37,37,37,37,37,37,37,37,37,37,37,37,-18,37,]),'EQ':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[38,-15,-16,-17,38,38,38,38,38,38,38,38,38,38,38,38,38,-18,38,]),'NE':([17,19,20,21,27,28,40,46,47,48,49,50,51,52,53,54,55,56,59,],[39,-15,-16,-17,39,39,39,39,39,39,39,39,39,39,39,39,39,-18,39,]),'COMMA':([19,20,21,25,27,41,46,47,48,49,50,51,52,53,54,55,56,59,],[-15,-16,-17,44,-34,44,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-18,-33,]),'LBRACE':([42,45,57,65,],[58,61,62,61,]),'ELSE':([60,67,72,],[65,-14,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,58,61,62,63,66,68,],[2,12,64,64,64,70,70,70,]),'variable_declaration':([0,1,58,61,62,63,66,68,],[3,3,3,3,3,3,3,3,]),'conditional_statement':([0,1,58,61,62,63,66,68,],[4,4,4,4,4,4,4,4,]),'function_call':([0,1,58,61,62,63,66,68,],[5,5,5,5,5,5,5,5,]),'return_statement':([0,1,58,61,62,63,66,68,],[6,6,6,6,6,6,6,6,]),'function_declaration':([0,1,58,61,62,63,66,68,],[7,7,7,7,7,7,7,7,]),'expression':([11,15,16,22,24,30,31,32,33,34,35,36,37,38,39,44,],[17,27,28,40,27,46,47,48,49,50,51,52,53,54,55,59,]),'argument_list':([15,24,],[25,41,]),'compound_statement':([45,65,],[60,71,]),'statement_list':([58,61,62,],[63,66,68,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','parse.py',10),
  ('program -> statement','program',1,'p_program','parse.py',11),
  ('statement -> variable_declaration','statement',1,'p_statement','parse.py',17),
  ('statement -> conditional_statement','statement',1,'p_statement','parse.py',18),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','parse.py',19),
  ('statement -> return_statement','statement',1,'p_statement','parse.py',20),
  ('statement -> function_declaration','statement',1,'p_statement','parse.py',21),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parse.py',26),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parse.py',27),
  ('variable_declaration -> TYPE ID SEMICOLON','variable_declaration',3,'p_variable_declaration','parse.py',32),
  ('conditional_statement -> IF LPAREN expression RPAREN compound_statement','conditional_statement',5,'p_conditional_statement','parse.py',38),
  ('conditional_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement','conditional_statement',7,'p_conditional_statement','parse.py',39),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','parse.py',43),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement','parse.py',44),
  ('expression -> STRING','expression',1,'p_expression','parse.py',54),
  ('expression -> ID','expression',1,'p_expression','parse.py',55),
  ('expression -> NUMBER','expression',1,'p_expression','parse.py',56),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parse.py',57),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parse.py',58),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parse.py',59),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parse.py',60),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parse.py',61),
  ('expression -> expression LT expression','expression',3,'p_expression','parse.py',62),
  ('expression -> expression LE expression','expression',3,'p_expression','parse.py',63),
  ('expression -> expression GT expression','expression',3,'p_expression','parse.py',64),
  ('expression -> expression GE expression','expression',3,'p_expression','parse.py',65),
  ('expression -> expression EQ expression','expression',3,'p_expression','parse.py',66),
  ('expression -> expression NE expression','expression',3,'p_expression','parse.py',67),
  ('function_call -> ID LPAREN argument_list RPAREN','function_call',4,'p_function_call','parse.py',73),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','parse.py',74),
  ('function_declaration -> TYPE ID LPAREN argument_list RPAREN LBRACE statement_list RBRACE','function_declaration',8,'p_function_declaration','parse.py',78),
  ('function_declaration -> TYPE ID LPAREN RPAREN LBRACE statement_list RBRACE','function_declaration',7,'p_function_declaration','parse.py',79),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parse.py',84),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parse.py',85),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parse.py',90),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parse.py',91),
]
